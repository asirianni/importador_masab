/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package importador;


import com.csvreader.CsvReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.Calendar;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author adrians
 */
public class ventana_principal extends javax.swing.JFrame {
    
    AOrigen archivos = new AOrigen();
    Calendar fecha = Calendar.getInstance();
    int anio = fecha.get(Calendar.YEAR);
    int mes = fecha.get(Calendar.MONTH) + 1;
    int dia = fecha.get(Calendar.DAY_OF_MONTH);
    
    /**
     * Creates new form ventana_principal
     */
    public ventana_principal() {
        initComponents();
        get_inicio_propiedades();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jCheckBox1 = new javax.swing.JCheckBox();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        jButton4.setText("importar ahora");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton2.setText("origen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton5.setText("destino");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel2.setText("seleccione");

        jLabel3.setText("seleccione");

        jButton6.setText("importar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jCheckBox1.setText("solo productos unilever");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jCheckBox1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String texto= abrirBuscadorArchivo();
        set_properties("origen", texto);
        jLabel2.setText(texto);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       String texto= abrirBuscadorArchivo();
       set_properties("destino", texto);
       jLabel3.setText(texto);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        
        
        Properties prop = new Properties();
        InputStream is = null;
        try {
            is = new FileInputStream("src/importador/config.properties");
            prop.load(is);
            
            String sDirectorOrigen = prop.getProperty("origen");
            String sDirectorDestino = prop.getProperty("destino");
            
            File origen = new File(sDirectorOrigen);
            File destino = new File(sDirectorDestino);
            
            if (origen.exists()){
                jTextArea1.append("existe el directorio origen");
                if (destino.exists()){
                    jTextArea1.append("\n existe el directorio destino");
                    if (verificar_origen(origen)){
                        jTextArea1.append("\n nombre: "+archivos.getNombre_archivo_MASNTHG());
                        jTextArea1.append("\n ruta: "+archivos.getRuta_archivo_MASNTHG());
                        jTextArea1.append("\n nombre: "+archivos.getNombre_archivo_MASNTHG_CLIENTES());
                        jTextArea1.append("\n ruta: "+archivos.getRuta_archivo_MASNTHG_CLIENTES());
                        jTextArea1.append("\n nombre: "+archivos.getNombre_archivo_MASNTHG_MAEART());
                        jTextArea1.append("\n ruta: "+archivos.getRuta_archivo_MASNTHG_MAEART());
                        jTextArea1.append("\n nombre: "+archivos.getNombre_archivo_MASNTHG_MSTOCK());
                        jTextArea1.append("\n ruta: "+archivos.getRuta_archivo_MASNTHG_MSTOCK());
                        jTextArea1.append("\n nombre: "+archivos.getNombre_archivo_MASNTHG_MVTA());
                        jTextArea1.append("\n ruta: "+archivos.getRuta_archivo_MASNTHG_MVTA());
                        
                        //generar CADPROD---------------------------------------------------------------------------------------------------------------
                        
                        String ficheroCadProd=generar_ruta_archivo(sDirectorDestino, "ACC_CADPROD");
                        jTextArea1.append("\n fichero creado: "+ficheroCadProd);
                        File archivoCadProd = new File(ficheroCadProd);
                        BufferedWriter cadProd;

                        String cod_cliente_cod_prod="30710665466";
                        String fecha_cod_prod=obtenerFechaFormateada();
                        cadProd = new BufferedWriter(new FileWriter(archivoCadProd));

                        cadProd.write("H;"+cod_cliente_cod_prod+";"+fecha_cod_prod+";"+fecha_cod_prod);

                        cadProd.newLine();

                        try {
                            CsvReader csvReaderCodArt = new CsvReader(new FileReader(archivos.getRuta_archivo_MASNTHG_MAEART()));
                            csvReaderCodArt.readHeaders();

                            while (csvReaderCodArt.readRecord()) {
                                if(true){
                                    if(csvReaderCodArt.get(8).equals("00104")){
                                        generarLineaCadProd(csvReaderCodArt, cadProd);
                                    }
                                }else{
                                    generarLineaCadProd(csvReaderCodArt, cadProd);
                                }   
                            }
                            csvReaderCodArt.close();
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(Importador.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        cadProd.write("E");

                        cadProd.close();
                        
                        //generar SELLOUT-----------------------------------------------------------------------------------------------------------
                        String fichero=generar_ruta_archivo(sDirectorDestino, "ACC_SELLOUT");
                        jTextArea1.append("\n fichero creado: "+fichero);
                        File archivo = new File(fichero);
                        BufferedWriter bw;

                        String cod_cliente="30710665466";
                        String fecha=obtenerFechaFormateada();
                        bw = new BufferedWriter(new FileWriter(archivo));

                        bw.write("H;"+cod_cliente+";"+fecha+";"+fecha);

                        bw.newLine();

                        try {
                            CsvReader csvReader = new CsvReader(new FileReader(archivos.getRuta_archivo_MASNTHG_MVTA()));
                            csvReader.readHeaders();

                            while (csvReader.readRecord()) {
                                String codigo = csvReader.get(0);
                                String codCd="99999999999999";
                                String codFab="77775423697546";
                                String codBarra="7896543216668";
                                String cantidad="1000";
                                String valorLiquido="12000";
                                String moneda="BRL";
                                String identificadorTrans="1535285";
                                String fechaTras="20150119";
                                String tipoDeTrans="V";
                                String tipoIdenfPDV="1";
                                String identificadorPDV="44148564985645";
                                String descripPDV="CLIENTE XYZ";
                                String codPostPDV="95687412";
                                String clasifPDV="OTROS";
                                String vendedor="2 - MARCIO SILVA";

                                bw.write("V;"+codCd+";"+codFab+";"+codBarra+";"+cantidad+";"+valorLiquido+";"+moneda+";"+identificadorTrans+";"+fechaTras+";"+tipoDeTrans+";"+tipoIdenfPDV+";"+identificadorPDV+";"+descripPDV+";"+codPostPDV+";"+clasifPDV+";"+vendedor);

                                bw.newLine();         
                            }
                            csvReader.close();
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(Importador.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        bw.newLine();
                        bw.write("E");

                        bw.close();
                        
                    }
                }else {  
                    jTextArea1.append("\n no existe el directorio destino");
                }
            }else {  
                jTextArea1.append("\n no existe el directorio origen");
            }
            
             
        } catch(IOException e) {
                System.out.println(e.toString());
        }
        
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private void mostrarArchivosFichero(File origen){
        File[] ficheros = origen.listFiles();
        for (int x=0;x<ficheros.length;x++){
           jTextArea1.append("\n"+ficheros[x].getName());
        }
    }
    
    private String obtenerFechaFormateada(){
        
        String mesFormateado=String.valueOf(mes);
        String diaFormateado=String.valueOf(dia);
        String anioFormateado=String.valueOf(anio);

        if(mes<10){
            mesFormateado="0"+mes;
        }
        
        if(dia<10){
            diaFormateado="0"+dia;
        }
        return anioFormateado+mesFormateado+diaFormateado;
    }
    
    private String generar_ruta_archivo(String directorio, String nombre){
        
        String ruta=directorio+"\\"+nombre+"_"+obtenerFechaFormateada()+".txt";
        return ruta;
    }
    
    private Boolean verificar_origen(File origen){
        boolean validacion=false;
        
        int clientes=0;
        int articulos=0;
        int stock=0;
        int venta=0;
        int ini=0;
        
        File[] ficheros = origen.listFiles();
        for (int x=0;x<ficheros.length;x++){
            String cadena = ficheros[x].getName();
            
            int resultadoCliente = cadena.indexOf("MASNTHG_CLIENTES.csv");
            int resultadoArticulos = cadena.indexOf("MASNTHG_MAEART.csv");
            int resultadoStock = cadena.indexOf("MASNTHG_MSTOCK.csv");
            int resultadoVenta = cadena.indexOf("MASNTHG_MVTA.csv");
            int resultadoini = cadena.indexOf("MASNTHG.ini");

            if(resultadoCliente != -1) {
                clientes++;
                archivos.setNombre_archivo_MASNTHG_CLIENTES(cadena);
                archivos.setRuta_archivo_MASNTHG_CLIENTES(ficheros[x].getAbsolutePath());
            }
            if(resultadoArticulos != -1) {
                articulos++;
                archivos.setNombre_archivo_MASNTHG_MAEART(cadena);
                archivos.setRuta_archivo_MASNTHG_MAEART(ficheros[x].getAbsolutePath());
            }
            if(resultadoStock != -1) {
                stock++;
                archivos.setNombre_archivo_MASNTHG_MSTOCK(cadena);
                archivos.setRuta_archivo_MASNTHG_MSTOCK(ficheros[x].getAbsolutePath());
            }
            if(resultadoVenta != -1) {
                venta++;
                archivos.setNombre_archivo_MASNTHG_MVTA(cadena);
                archivos.setRuta_archivo_MASNTHG_MVTA(ficheros[x].getAbsolutePath());
            }
            if(resultadoini != -1) {
                ini++;
                archivos.setNombre_archivo_MASNTHG(cadena);
                archivos.setRuta_archivo_MASNTHG(ficheros[x].getAbsolutePath());
            }
        }
        validarCantidad(clientes, "MASNTHG_CLIENTES");
        validarCantidad(articulos, "MASNTHG_MAEART");
        validarCantidad(stock, "MASNTHG_MSTOCK");
        validarCantidad(venta, "MASNTHG_MVTA");
        validarCantidad(ini, "MASNTHG");
        
        
        if(clientes==1 && articulos==1 && stock ==1 && venta==1 && ini==1){
            validacion=true;
        }else{
             jTextArea1.append("\n archivos duplicados verifique los archivos en la carpeta origen");
        }
        
        return validacion;
    }
    
    private void generarLineaCadProd (CsvReader csvReaderCodArt, BufferedWriter cadProd) throws IOException{

        String codFab="30501092696";
        String descFab="UNILEVER DE ARGENTINA S.A.";
        String codProd=csvReaderCodArt.get(1);
        String descProd=csvReaderCodArt.get(2);
        String codGrup=csvReaderCodArt.get(6);
        String descGroup=csvReaderCodArt.get(7);
        String codFam="";
        String descFam="";
        String codSubFam="";
        String descSubFam="";
        String codBarra=csvReaderCodArt.get(3);
        String tipoEmbalaje=csvReaderCodArt.get(39);
        String volEmbalaje=generarVolEmbalaje(csvReaderCodArt.get(38));
        String estatusProd="A";
        String fechaRegistro=generarFechaRegistro(csvReaderCodArt.get(54));
        cadProd.write("V;"+codFab+";"+descFab+";"+codProd+";"+descProd+";"+codGrup+";"+descGroup+";"+codFam+";"+descFam+";"+codSubFam+";"+descSubFam+";E;"+codBarra+";"+tipoEmbalaje+";UN;"+volEmbalaje+";"+estatusProd+";"+fechaRegistro);
        cadProd.newLine(); 
    }
    
    private boolean isNumeric(String cadena){
	try {
		Integer.parseInt(cadena);
		return true;
	} catch (NumberFormatException nfe){
		return false;
	}
}
    
    private String generarVolEmbalaje(String cant){
        int cantidad = 0;
        if(isNumeric(cant)){
             cantidad = Integer.valueOf(cant);
             cantidad=cantidad*1000;
        }
        return String.valueOf(cantidad);
        
    }
    
    private String generarFechaRegistro(String dias){
        String fechaSeleccionada="";
        int diasSumados=Integer.valueOf(dias);
        Calendar cal = Calendar.getInstance();
        cal.set(1800,10,10,7,0,0);
        cal.add(Calendar.DAY_OF_MONTH, diasSumados); 
        
        int anio_selected = cal.get(Calendar.YEAR);
        int mes_selected = cal.get(Calendar.MONTH) + 1;
        int dia_selected = cal.get(Calendar.DAY_OF_MONTH);
        
        String mesFormateado=String.valueOf(mes_selected);
        String diaFormateado=String.valueOf(dia_selected);
        String anioFormateado=String.valueOf(anio_selected);
        
        if(mes_selected<10){
            mesFormateado="0"+mes_selected;
        }
        
        if(dia_selected<10){
            diaFormateado="0"+dia_selected;
        }
        
        
        fechaSeleccionada=anioFormateado+mesFormateado+diaFormateado;
        
        return fechaSeleccionada;
    }
    
    private void validarCantidad (int cantidad, String archivo){
        if(cantidad==1){
            jTextArea1.append("\n archivo "+archivo+" OK");
        }else{
            jTextArea1.append("\n archivo "+archivo+" no encontrado o duplicado");
        }
    }
    
    private String abrirBuscadorArchivo()
    {
        File abre;

        try
        {
            JFileChooser file = new JFileChooser();
            file.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            file.showOpenDialog(this);

            abre = file.getSelectedFile();
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, "No se ha podido leer el archivo");
            abre = new File("");
        }

        return abre.getAbsolutePath();
    }
    
    private void set_properties(String propiedad, String valor){
        Properties prop = new Properties();
        InputStream is = null;
        try {
            is = new FileInputStream("src/importador/config.properties");
            prop.load(is);
            prop.setProperty(propiedad, valor);

            prop.store(new FileWriter("src/importador/config.properties"),"ultima actualizacion");
        } catch(IOException e) {
                System.out.println(e.toString());
        }
    }
    
    private void get_inicio_propiedades(){
        Properties prop = new Properties();
        InputStream is = null;
        try {
            is = new FileInputStream("src/importador/config.properties");
            prop.load(is);
             jLabel2.setText(prop.getProperty("origen"));
             jLabel3.setText(prop.getProperty("destino"));
        } catch(IOException e) {
                System.out.println(e.toString());
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventana_principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventana_principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventana_principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventana_principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventana_principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
    
}
